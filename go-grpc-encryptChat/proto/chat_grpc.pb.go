// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// Sends a Chating
	Chat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRes, error)
	ChatIn(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatInClient, error)
	ChatOut(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (Chat_ChatOutClient, error)
	ChatIO(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatIOClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Chat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRes, error) {
	out := new(ChatRes)
	err := c.cc.Invoke(ctx, "/proto.Chat/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChatIn(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatInClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], "/proto.Chat/ChatIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatInClient{stream}
	return x, nil
}

type Chat_ChatInClient interface {
	Send(*ChatReq) error
	CloseAndRecv() (*ChatRes, error)
	grpc.ClientStream
}

type chatChatInClient struct {
	grpc.ClientStream
}

func (x *chatChatInClient) Send(m *ChatReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatInClient) CloseAndRecv() (*ChatRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ChatRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) ChatOut(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (Chat_ChatOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[1], "/proto.Chat/ChatOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_ChatOutClient interface {
	Recv() (*ChatRes, error)
	grpc.ClientStream
}

type chatChatOutClient struct {
	grpc.ClientStream
}

func (x *chatChatOutClient) Recv() (*ChatRes, error) {
	m := new(ChatRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) ChatIO(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatIOClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[2], "/proto.Chat/ChatIO", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatIOClient{stream}
	return x, nil
}

type Chat_ChatIOClient interface {
	Send(*ChatReq) error
	Recv() (*ChatRes, error)
	grpc.ClientStream
}

type chatChatIOClient struct {
	grpc.ClientStream
}

func (x *chatChatIOClient) Send(m *ChatReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatIOClient) Recv() (*ChatRes, error) {
	m := new(ChatRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// Sends a Chating
	Chat(context.Context, *ChatReq) (*ChatRes, error)
	ChatIn(Chat_ChatInServer) error
	ChatOut(*ChatReq, Chat_ChatOutServer) error
	ChatIO(Chat_ChatIOServer) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) Chat(context.Context, *ChatReq) (*ChatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatServer) ChatIn(Chat_ChatInServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatIn not implemented")
}
func (UnimplementedChatServer) ChatOut(*ChatReq, Chat_ChatOutServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatOut not implemented")
}
func (UnimplementedChatServer) ChatIO(Chat_ChatIOServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatIO not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chat/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Chat(ctx, req.(*ChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChatIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).ChatIn(&chatChatInServer{stream})
}

type Chat_ChatInServer interface {
	SendAndClose(*ChatRes) error
	Recv() (*ChatReq, error)
	grpc.ServerStream
}

type chatChatInServer struct {
	grpc.ServerStream
}

func (x *chatChatInServer) SendAndClose(m *ChatRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatInServer) Recv() (*ChatReq, error) {
	m := new(ChatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_ChatOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).ChatOut(m, &chatChatOutServer{stream})
}

type Chat_ChatOutServer interface {
	Send(*ChatRes) error
	grpc.ServerStream
}

type chatChatOutServer struct {
	grpc.ServerStream
}

func (x *chatChatOutServer) Send(m *ChatRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_ChatIO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).ChatIO(&chatChatIOServer{stream})
}

type Chat_ChatIOServer interface {
	Send(*ChatRes) error
	Recv() (*ChatReq, error)
	grpc.ServerStream
}

type chatChatIOServer struct {
	grpc.ServerStream
}

func (x *chatChatIOServer) Send(m *ChatRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatIOServer) Recv() (*ChatReq, error) {
	m := new(ChatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Chat_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatIn",
			Handler:       _Chat_ChatIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatOut",
			Handler:       _Chat_ChatOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChatIO",
			Handler:       _Chat_ChatIO_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chat.proto",
}
